# .github/workflows/deploy-api.yml
name: Deploy API Service to ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  ECR_ACCOUNT: "067826606836"
  CLUSTER: upbeat-crocodile-7y9smz
  SERVICE: api-service-service-uew0hyo9

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & push API image
        id: build
        run: |
          IMAGE_URI=${{ env.ECR_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/api-service:${{ github.sha }}
          echo "Pushing to $IMAGE_URI"
          docker build \
            -t $IMAGE_URI \
            -f backend/api_service/Dockerfile \
            backend
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Render ECS task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/api-service-task-def.json
          container-name:  api-service
          image:           ${{ steps.build.outputs.IMAGE_URI }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition:            ${{ steps.render.outputs.task-definition }}
          service:                    ${{ env.SERVICE }}
          cluster:                    ${{ env.CLUSTER }}
          wait-for-service-stability: true
