# render.yaml
# Blueprint for SEP4 monorepo: API, ML, TCP, Frontend, NATS, Postgres

envVarGroups:
  - name: prod
    envVars:
      # DB connection (from the pg database below)
      - key: DATABASE_URL
        fromDatabase:
          name: pg
          property: connectionString

      # NATS address for backend services
      - key: NATS_URL
        fromService:
          name: nats-server
          type: pserv
          property: hostport

      # Shared secrets
      - key: JWT_SECRET
        generateValue: true
      - key: SEED_MOCK_DATA
        value: "false"

services:
  # 1) FastAPI backend
  - name: api-service
    type: web
    runtime: docker
    plan: starter
    region: frankfurt
    branch: main
    autoDeployTrigger: off
    buildFilter:
      paths:
        - backend/api_service/**
    dockerContext: .
    dockerfilePath: backend/api_service/Dockerfile
    healthCheckPath: /health
    envVars:
      - fromGroup: prod

  # 2) ML model API & training job
  - name: ml-service
    type: web
    runtime: docker
    plan: starter
    region: frankfurt
    branch: main
    autoDeployTrigger: off
    buildFilter:
      paths:
        - backend/ml_service/**
    dockerContext: .
    dockerfilePath: backend/ml_service/Dockerfile
    healthCheckPath: /health
    envVars:
      - fromGroup: prod

  # 3) TCP listener for IoT â†’ NATS
  - name: tcp-service
    type: pserv
    runtime: docker
    plan: starter
    region: frankfurt
    branch: main
    autoDeployTrigger: off
    buildFilter:
      paths:
        - backend/tcp_service/**
    dockerContext: .
    dockerfilePath: backend/tcp_service/Dockerfile
    envVars:
      - fromGroup: prod

  # 4) React/Vite frontend
  - name: frontend-service
    type: web
    runtime: docker
    plan: starter
    region: frankfurt
    branch: main
    autoDeployTrigger: off
    buildFilter:
      paths:
        - frontend/**
    dockerContext: .
    dockerfilePath: frontend/Dockerfile
    healthCheckPath: /health
    envVars:
      - fromGroup: prod

  # 5) NATS message broker
  - name: nats-server
    type: pserv
    runtime: image
    image:
      url: nats:2
    plan: starter
    region: frankfurt
    # default autoDeployTrigger: commit, no buildFilter needed

databases:
  # 6) PostgreSQL
  - name: pg
    region: frankfurt
    plan: starter
    diskSizeGB: 10
    databaseName: appdb
    user: render_user
    ipAllowList: []
